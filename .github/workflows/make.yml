name: Make

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'milestone-*/**/*.c'
      - 'milestone-*/**/*.cpp'
      - 'milestone-*/**/*.cc'
      - 'milestone-*/**/*.cxx'
      - 'milestone-*/**/*.h'
      - 'milestone-*/**/*.hpp'
      - 'milestone-*/**/*.hh'
      - 'milestone-*/**/*.hxx'
      - 'milestone-*/**/Makefile'
      - 'milestone-*/**/makefile'
      - '.github/workflows/make.yml'
  pull_request:
    paths:
      - 'milestone-*/**/*.c'
      - 'milestone-*/**/*.cpp'
      - 'milestone-*/**/*.cc'
      - 'milestone-*/**/*.cxx'
      - 'milestone-*/**/*.h'
      - 'milestone-*/**/*.hpp'
      - 'milestone-*/**/*.hh'
      - 'milestone-*/**/*.hxx'
      - 'milestone-*/**/Makefile'
      - 'milestone-*/**/makefile'
      - '.github/workflows/make.yml'

jobs:
  # Job to detect which projects have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-projects: ${{ steps.changes.outputs.changed-projects }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed projects
        id: changes
        shell: bash
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} 2>/dev/null || echo "")
          elif [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ] && [ -n "${{ github.event.before }}" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "")
          else
            # For initial commit or when before is not available, check all milestone files
            CHANGED_FILES=$(find . -path './milestone-*' -type f \( -name '*.c' -o -name '*.cpp' -o -name '*.cc' -o -name '*.cxx' -o -name '*.h' -o -name '*.hpp' -o -name '*.hh' -o -name '*.hxx' -o -name 'Makefile' -o -name 'makefile' \) | sed 's|^\./||' 2>/dev/null || echo "")
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Extract unique project names from changed files
          CHANGED_PROJECTS=""
          if [ -n "$CHANGED_FILES" ]; then
            MILESTONE_FILES=$(echo "$CHANGED_FILES" | grep -E '^milestone-[^/]+/' || true)
            if [ -n "$MILESTONE_FILES" ]; then
              CHANGED_PROJECTS=$(echo "$MILESTONE_FILES" | sed 's|milestone-\([^/]*\)/.*|\1|' | sort -u | tr '\n' ' ' | sed 's/ $//')
            fi
          fi

          echo "Changed projects: $CHANGED_PROJECTS"

          # Convert to JSON array for matrix
          if [ -n "$CHANGED_PROJECTS" ]; then
            JSON_ARRAY=$(echo "$CHANGED_PROJECTS" | tr ' ' '\n' | grep -v '^$' | sed 's/.*/"&"/' | tr '\n' ',' | sed 's/,$//' | sed 's/^/[/' | sed 's/$/]/')
          else
            JSON_ARRAY="[]"
          fi

          echo "JSON array: $JSON_ARRAY"
          echo "changed-projects=$JSON_ARRAY" >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.target }} [${{ matrix.os }}-${{ matrix.arch }}]
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-projects != '[]'

    strategy:
      matrix:
        os: [ubuntu-22.04]
        arch: [x86_64]
        target: ${{ fromJson(needs.detect-changes.outputs.changed-projects) }}
        include:
          # Linux builds
          - os: ubuntu-22.04
            arch: x86_64
            shell: bash

    steps:
      # Configure Git to handle special characters before checkout
      - name: Configure Git
        shell: bash
        run: |
          git config --global core.protectNTFS false
          git config --global core.quotePath false
          git config --global core.safecrlf false

      # Modified checkout with special handling
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
        env:
          GIT_TEST_DEBUG: 1

      - name: Install LibBSD
        if: runner.os == 'Linux'
        shell: bash
        run: sudo apt-get install libbsd-dev

      - name: Build ${{ matrix.target }} Linux
        if: runner.os == 'Linux'
        shell: bash
        run: make ${{ matrix.target }}
