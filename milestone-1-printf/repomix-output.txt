This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-19T17:09:30.012Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.obj/
  ft_printf.d
  ft_putchar_fd.d
  ft_putchar.d
ft_printf.c
ft_putchar.c
ft_putnbr_base_ssize.c
ft_strlen.c
libftprintf.h
main.c
Makefile

================================================================
Repository Files
================================================================

================
File: .obj/ft_printf.d
================
.obj/ft_printf.o: ft_printf.c libftprintf.h

libftprintf.h:

================
File: .obj/ft_putchar_fd.d
================
.obj/ft_putchar_fd.o: ft_putchar_fd.c libftprintf.h

libftprintf.h:

================
File: .obj/ft_putchar.d
================
.obj/ft_putchar.o: ft_putchar.c libftprintf.h

libftprintf.h:

================
File: ft_printf.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                     _    ⣀⣀⣀⡀⡀⡀⡀⣀⡀⣀⣀⣀⡀  */
/*   ft_printf.c                                   _ _/ |   ⡇⣶⡆⡇⡾⢏⡭⡵⠀⡇⣶⡆⡇  */
/*                                                | '_| |_  ⣓⣒⠒⡃⡂⣏⡆⡯⢇⠓⠶⠖⡃  */
/*   By: elagouch <elagouch@student.42.fr>        |_|_|_(@) ⢻⣊⡞⣪⢳⡗⣳⢤⣈⢍⣰⢖⡇  */
/*                                                | | |_  ) ⠜⡲⡢⣲⡯⡼⡑⡁⣝⣘⡚⢠⠅  */
/*   Created: 2024/11/19 13:56:34 by elagouch     |_  _/ /  ⡖⣒⡒⡆⠉⠧⢰⣮⣇⣂⡏⡳⡆  */
/*   Updated: 2024/11/19 14:00:17 by elagouch       |_/___| ⣇⣛⣃⡇⡿⢤⠤⠾⠡⠹⢝⣚⡁  */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdarg.h>
#include <stddef.h>
#include <unistd.h>

static ssize_t	pf_display(va_list *args, const char *format)
{
	void	*tmp;

	tmp = 0;
	if (*format == 'c')
		return (ft_putchar_ssize((char)va_arg(*args, int)));
	else if (*format == 's')
	{
		tmp = va_arg(*args, char *);
		return (write(1, tmp, ft_strlen(tmp)));
	}
	// else if (*format == 'p')
	// 	return ;
	else if (*format == 'd')
		return (ft_putnbr_base_ssize(va_arg(*args, int), "0123456789"));
	// else if (*format == 'i')
	// 	return ;
	// else if (*format == 'u')
	// 	return ;
	// else if (*format == 'x')
	// 	return ;
	// else if (*format == 'X')
	// 	return ;
	else if (*format == '%')
		return (ft_putchar_ssize('%'));
	return (0);
}

/*
 * Format and print a string.
 * @see		man printf.3
 *
 * @param	format	the formatting string
 * @param	...		tyhe rest of the variables of types introduces in format
 *
 * @returns	Upon  successful return, these functions return the number of
 *								characters printed (excluding the
 *			null byte used to end output to strings).
 */
int	ft_printf(const char *format, ...)
{
	va_list	args;
	size_t	count;

	count = 0;
	va_start(args, format);
	while (*format)
	{
		if (*format == '%')
			count += pf_display(&args, ++format);
		else
			count += ft_putchar_ssize(*format);
		format++;
	}
	va_end(args);
	return (count);
}

================
File: ft_putchar.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/11 09:28:13 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/19 16:22:37 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <unistd.h>

ssize_t	ft_putchar_ssize(char c)
{
	return (write(1, &c, 1));
}

================
File: ft_putnbr_base_ssize.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_base_ssize.c                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/18 13:37:33 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/19 17:49:41 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <unistd.h>

static size_t	bad_base(char *base)
{
	size_t	i;
	size_t	j;

	if (!base || !base[0] || !base[1])
		return (1);
	i = 0;
	while (base[i])
	{
		if (base[i] == '-' || base[i] == '+')
			return (1);
		j = 0;
		while (base[j])
		{
			if (j == i && base[j + 1])
				j++;
			else if (base[j] == base[i] && base[j + 1])
				return (1);
			j++;
		}
		i++;
	}
	return (0);
}

ssize_t	ft_putnbr_base_ssize(int nbr, char *base)
{
	ssize_t	count;
	size_t	base_len;

	count = 0;
	base_len = ft_strlen(base);
	if (bad_base(base))
		return (0);
	if (nbr < 0)
	{
		count += write(1, "-", 1);
		count += ft_putnbr_base_ssize(-nbr, base);
		return (count);
	}
	if (nbr >= (int)base_len)
		count += ft_putnbr_base_ssize(nbr / base_len, base);
	count += write(1, &(base[nbr % base_len]), 1);
	return (count);
}

================
File: ft_strlen.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                     _    ⣀⣀⣀⡀⡀⡀⡀⣀⡀⣀⣀⣀⡀  */
/*   ft_strlen.c                                   _ _/ |   ⡇⣶⡆⡇⡾⢏⡭⡵⠀⡇⣶⡆⡇  */
/*                                                | '_| |_  ⣓⣒⠒⡃⡂⣏⡆⡯⢇⠓⠶⠖⡃  */
/*   By: elagouch <elagouch@student.42lyon.fr>    |_|_|_(@) ⢻⣊⡞⣪⢳⡗⣳⢤⣈⢍⣰⢖⡇  */
/*                                                | | |_  ) ⠜⡲⡢⣲⡯⡼⡑⡁⣝⣘⡚⢠⠅  */
/*   Created: 2024/11/05 15:40:27 by elagouch     |_  _/ /  ⡖⣒⡒⡆⠉⠧⢰⣮⣇⣂⡏⡳⡆  */
/*   Updated: 2024/11/11 13:25:49 by elagouch       |_/___| ⣇⣛⣃⡇⡿⢤⠤⠾⠡⠹⢝⣚⡁  */
/*                                                                            */
/* ************************************************************************** */

#include <unistd.h>

/*
 * Gets the length of a string.
 *
 * @param	str	string to get length from
 *
 * @retuns	length of str
 */
size_t	ft_strlen(const char *str)
{
	size_t	i;

	i = 0;
	while (str[i] != '\0')
		i++;
	return (i);
}

================
File: libftprintf.h
================
/* ************************************************************************** */
/*                                                                            */
/*                                                     _    ⣀⣀⣀⡀⡀⡀⡀⣀⡀⣀⣀⣀⡀  */
/*   libftprintf.h                                 _ _/ |   ⡇⣶⡆⡇⡾⢏⡭⡵⠀⡇⣶⡆⡇  */
/*                                                | '_| |_  ⣓⣒⠒⡃⡂⣏⡆⡯⢇⠓⠶⠖⡃  */
/*   By: elagouch <elagouch@student.42.fr>        |_|_|_(@) ⢻⣊⡞⣪⢳⡗⣳⢤⣈⢍⣰⢖⡇  */
/*                                                | | |_  ) ⠜⡲⡢⣲⡯⡼⡑⡁⣝⣘⡚⢠⠅  */
/*   Created: 2024/11/19 13:56:34 by elagouch     |_  _/ /  ⡖⣒⡒⡆⠉⠧⢰⣮⣇⣂⡏⡳⡆  */
/*   Updated: 2024/11/19 14:00:17 by elagouch       |_/___| ⣇⣛⣃⡇⡿⢤⠤⠾⠡⠹⢝⣚⡁  */
/*                                                                            */
/* ************************************************************************** */

#ifndef LIBFTPRINTF_H
# define LIBFTPRINTF_H

# include <unistd.h>

ssize_t	ft_putnbr_base_ssize(int nbr, char *base);
ssize_t	ft_putchar_ssize(char c);
size_t	ft_strlen(const char *str);
int		ft_printf(const char *format, ...);

#endif

================
File: main.c
================
#include "libftprintf.h"
#include <limits.h>
#include <stdio.h>

int	main(void)
{
	int	num;

	int original, custom;
	// Basic string tests
	printf("\n=== String Tests ===\n");
	original = printf("Original: Hello %s!\n", "World");
	custom = ft_printf("Custom  : Hello %s!\n", "World");
	printf("Length check: original=%d, custom=%d\n", original, custom);
	// Integer tests
	printf("\n=== Integer Tests ===\n");
	original = printf("Original: %d, %i\n", 42, -42);
	custom = ft_printf("Custom  : %d, %i\n", 42, -42);
	printf("Length check: original=%d, custom=%d\n", original, custom);
	// Unsigned tests
	// printf("\n=== Unsigned Tests ===\n");
	// original = printf("Original: %u\n", UINT_MAX);
	// custom = ft_printf("Custom  : %u\n", UINT_MAX);
	// printf("Length check: original=%d, custom=%d\n", original, custom);
	// // Hex tests
	// printf("\n=== Hex Tests ===\n");
	// original = printf("Original: %x %X\n", 255, 255);
	// custom = ft_printf("Custom  : %x %X\n", 255, 255);
	// printf("Length check: original=%d, custom=%d\n", original, custom);
	// // Pointer tests
	num = 42;
	// printf("\n=== Pointer Tests ===\n");
	// original = printf("Original: %p\n", (void *)&num);
	// custom = ft_printf("Custom  : %p\n", (void *)&num);
	// printf("Length check: original=%d, custom=%d\n", original, custom);
	// // Char tests
	// printf("\n=== Char Tests ===\n");
	// original = printf("Original: %c%c%c\n", 'a', '\t', 'b');
	// custom = ft_printf("Custom  : %c%c%c\n", 'a', '\t', 'b');
	// printf("Length check: original=%d, custom=%d\n", original, custom);
	// // Edge cases
	// printf("\n=== Edge Cases ===\n");
	// original = printf("Original: %%\n");
	// custom = ft_printf("Custom  : %%\n");
	// printf("Length check: original=%d, custom=%d\n", original, custom);
	// original = printf("Original: %d %s\n", INT_MIN, (char *)NULL);
	// custom = ft_printf("Custom  : %d %s\n", INT_MIN, NULL);
	// printf("Length check: original=%d, custom=%d\n", original, custom);
	return (0);
}

================
File: Makefile
================
# **************************************************************************** #
#                                                                              #
#                                                       _    ⣀⣀⣀⡀⡀⡀⡀⣀⡀⣀⣀⣀⡀  #
#    Makefile                                       _ _/ |   ⡇⣶⡆⡇⡾⢏⡭⡵⠀⡇⣶⡆⡇  #
#                                                  | '_| |_  ⣓⣒⠒⡃⡂⣏⡆⡯⢇⠓⠶⠖⡃  #
#    By: elagouch <elagouch@student.42.fr>         |_|_|_(@) ⢻⣊⡞⣪⢳⡗⣳⢤⣈⢍⣰⢖⡇  #
#                                                  | | |_  ) ⠜⡲⡢⣲⡯⡼⡑⡁⣝⣘⡚⢠⠅  #
#    Created: 2024/11/05 15:39:47 by elagouch      |_  _/ /  ⡖⣒⡒⡆⠉⠧⢰⣮⣇⣂⡏⡳⡆  #
#    Updated: 2024/11/18 11:13:41 by elagouch        |_/___| ⣇⣛⣃⡇⡿⢤⠤⠾⠡⠹⢝⣚⡁  #
#                                                                              #
# **************************************************************************** #

# ------------- ANSI -------------
TITLE_SEC	= \033[48;5;78;30;1m
RESET		= \033[0m

# ------------- Meta -------------
GPM_MSTONE	= 1
GPM_NAME	= printf
GPM_FNAME	= $(GPM_MSTONE)-$(GPM_NAME)
NAME		= libftprintf.a
DIR_OBJ 	= .obj/

# ----------- Commands -----------
ECHO		= echo
CC			= cc
AR			= ar
RM      	= rm -f
MD			= mkdir -p

# ------------- Flags ------------
CFLAGS		= -Wall -Werror -Wextra -Wpedantic -MMD -MP
ARFLAGS		= rcs

# ------------ Sources -----------
SRC			=				\
	ft_printf.c				\
	ft_putchar.c			\
	ft_putnbr_base_ssize.c	\
	ft_strlen.c
SRC_BONUS	=

# ------------ Mapping -----------
OBJ			= $(SRC:%.c=$(DIR_OBJ)%.o)
DEP			= $(SRC:%.c=$(DIR_OBJ)%.d)
OBJ_BONUS	= $(SRC_BONUS:%.c=$(DIR_OBJ)%.o)
DEP_BONUS	= $(SRC_BONUS:%.c=$(DIR_OBJ)%.d)

# ------------ Targets -----------
all: $(NAME)

$(NAME): $(OBJ)
	@$(ECHO) "$(TITLE_SEC) $(GPM_FNAME) \t$(RESET)Building lib"
	$(AR) $(ARFLAGS) $(NAME) $?

.bonus: $(OBJ) $(OBJ_BONUS)
	@$(ECHO) "$(TITLE_SEC) $(GPM_FNAME) \t$(RESET)Building bonuses lib"
	$(AR) $(ARFLAGS) $(NAME) $?
	@touch .bonus

bonus: .bonus # Temp file to avoid unnecessary rebuilds

$(DIR_OBJ)%.o: %.c Makefile
	@$(MD) $(DIR_OBJ)
	@$(ECHO) "$(TITLE_SEC) $(GPM_FNAME) \t$(RESET)... $@"
	@$(CC) $(CFLAGS) -c $< -o $@

clean:
	@$(ECHO) "$(TITLE_SEC) $(GPM_FNAME) \t$(RESET)Cleaning the project"
	@$(RM) -r $(DIR_OBJ)

fclean: clean
	@$(ECHO) "$(TITLE_SEC) $(GPM_FNAME) \t$(RESET)Fcleaning the project"
	@$(RM) $(NAME)

re: fclean all

# ----------- Make meta ----------
MAKEFLAGS	+= --no-print-directory
-include $(DEP) $(DEP_BONUS)
.PHONY: all bonus clean fclean re
.SILENT: clean fclean
