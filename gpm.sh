#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

usage() {
	echo -e "${BLUE}Git Project Manager 📦${NC}"
	echo -e "Usage:"
	echo -e "  ${BLUE}gpm${NC} add <repo-url> <project-name>           ${GREEN}# Add project to central repo${NC}"
	echo -e "  ${BLUE}gpm${NC} submit <project-name> <target-repo-url> ${GREEN}# Submit (force push) a project to the 42 intra${NC}"
	echo -e "  ${BLUE}gpm${NC} install                                 ${GREEN}# Add gpm to your PATH${NC}"
	exit 1
}

# Function to parse .push file and read exact file names
parse_push_file() {
    local push_file="$1"
    local base_dir="$2"
    local files_to_include=()

    if [ ! -f "$push_file" ]; then
        echo -e "${RED}❌ No .push file found${NC}"
        echo -e "${BLUE}ℹ️  Including all files by default${NC}"
        echo "*" >"$push_file"
    fi

    while IFS= read -r filename || [ -n "$filename" ]; do
        # Skip comments and empty lines
        [[ $filename =~ ^[[:space:]]*# ]] && continue
        [[ -z $filename ]] && continue

        # Remove leading and trailing whitespace
        filename=$(echo "$filename" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

        # Handle absolute paths (relative to project root)
        if [[ $filename == /* ]]; then
            filename="${filename#/}"
            if [ -f "$base_dir/$filename" ]; then
                files_to_include+=("$base_dir/$filename")
            else
                echo -e "${RED}Warning: File not found: $filename${NC}"
            fi
        else
            # Handle relative paths
            if [ -f "$base_dir/$filename" ]; then
                files_to_include+=("$base_dir/$filename")
            else
                echo -e "${RED}Warning: File not found: $filename${NC}"
            fi
        fi
    done <"$push_file"

    for file in "${files_to_include[@]}"; do
        echo "$file"
    done
    # echo "${files_to_include[@]}"
}

submit_project() {
	PROJECT_NAME=$1
	TARGET_REPO=$2
	ORIGINAL_DIR=$(pwd)

	# Check if target repo is a valid vogsphere URL
	if [[ ! "$TARGET_REPO" =~ ^git@vogsphere\.42lyon\.fr:vogsphere ]]; then
		echo -e "${RED}❌ Invalid target repository URL. Must be a vogsphere URL (git@vogsphere.42lyon.fr:vogsphere...)${NC}"
		exit 1
	fi

	echo -e "${BLUE}📤 submiting ${PROJECT_NAME}...${NC}"

	# Create temporary directory
	TEMP_DIR=$(mktemp -d)
	cd "$TEMP_DIR" || exit

	# Initialize new repo
	git init

	# Parse .push file and copy specified files
	echo -e "${BLUE}📑 Reading .push file...${NC}"
	PUSH_FILE="${ORIGINAL_DIR}/${PROJECT_NAME}/.push"

    # Read files into array
    readarray -t INCLUDED_FILES < <(parse_push_file "$PUSH_FILE" "${ORIGINAL_DIR}/${PROJECT_NAME}")

	if [ ${#INCLUDED_FILES[@]} -eq 0 ]; then
		echo -e "${RED}❌ No files in .push file${NC}"
		cd "$ORIGINAL_DIR" && rm -rf "$TEMP_DIR"
		exit 1
	fi

	# Copy included files maintaining directory structure
	echo -e "${BLUE}📦 Copying specified files...${NC}"
    for file in "${INCLUDED_FILES[@]}"; do
        if [ -f "$file" ]; then
            cp "$file" .
        fi
    done

	# Commit and force push
	git add .
	git commit -m "chore(gpm): submission of ${PROJECT_NAME}" -m "
╔════════════════════════════════╦══════════════════════════════════════════════════╗
║ ⣇⣿⠘⣿⣿⣿⡿⡿⣟⣟⢟⢟⢝⠵⡝⣿⡿⢂⣼⣿⣷⣌⠩⡫⡻⣝⠹⢿⣿⣷ ║                                                  ║
║ ⡆⣿⣆⠱⣝⡵⣝⢅⠙⣿⢕⢕⢕⢕⢝⣥⢒⠅⣿⣿⣿⡿⣳⣌⠪⡪⣡⢑⢝⣇ ║                                                  ║
║ ⡆⣿⣿⣦⠹⣳⣳⣕⢅⠈⢗⢕⢕⢕⢕⢕⢈⢆⠟⠋⠉⠁⠉⠉⠁⠈⠼⢐⢕⢽ ║                                                  ║
║ ⡗⢰⣶⣶⣦⣝⢝⢕⢕⠅⡆⢕⢕⢕⢕⢕⣴⠏⣠⡶⠛⡉⡉⡛⢶⣦⡀⠐⣕⢕ ║                                                  ║
║ ⡝⡄⢻⢟⣿⣿⣷⣕⣕⣅⣿⣔⣕⣵⣵⣿⣿⢠⣿⢠⣮⡈⣌⠨⠅⠹⣷⡀⢱⢕ ║                  ■            ■                  ║
║ ⡝⡵⠟⠈⢀⣀⣀⡀⠉⢿⣿⣿⣿⣿⣿⣿⣿⣼⣿⢈⡋⠴⢿⡟⣡⡇⣿⡇⡀⢕ ║                                                  ║
║ ⡝⠁⣠⣾⠟⡉⡉⡉⠻⣦⣻⣿⣿⣿⣿⣿⣿⣿⣿⣧⠸⣿⣦⣥⣿⡇⡿⣰⢗⢄ ║ This commit was generated by Git Project Manager ║
║ ⠁⢰⣿⡏⣴⣌⠈⣌⠡⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬⣉⣉⣁⣄⢖⢕⢕⢕ ║       Visit https://github.com/airone01/ft       ║
║ ⡀⢻⣿⡇⢙⠁⠴⢿⡟⣡⡆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣵⣵⣿ ║                                                  ║
║ ⡻⣄⣻⣿⣌⠘⢿⣷⣥⣿⠇⣿⣿⣿⣿⣿⣿⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ║                  ■            ■                  ║
║ ⣷⢄⠻⣿⣟⠿⠦⠍⠉⣡⣾⣿⣿⣿⣿⣿⣿⢸⣿⣦⠙⣿⣿⣿⣿⣿⣿⣿⣿⠟ ║                                                  ║
║ ⡕⡑⣑⣈⣻⢗⢟⢞⢝⣻⣿⣿⣿⣿⣿⣿⣿⠸⣿⠿⠃⣿⣿⣿⣿⣿⣿⡿⠁⣠ ║                                                  ║
║ ⡝⡵⡈⢟⢕⢕⢕⢕⣵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⠿⠋⣀⣈⠙ ║                                                  ║
║ ⡝⡵⡕⡀⠑⠳⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⢉⡠⡲⡫⡪⡪⡣ ║                                                  ║
╚════════════════════════════════╩══════════════════════════════════════════════════╝"
	git remote add origin "${TARGET_REPO}"
	if ! git push -f origin main; then
		echo -e "${RED}❌ Failed to push to repository${NC}"
		cd "$ORIGINAL_DIR" && rm -rf "$TEMP_DIR"
		exit 1
	fi

	cd "$ORIGINAL_DIR" && rm -rf "$TEMP_DIR"
	echo -e "${GREEN}✅ Project pushed to ${TARGET_REPO}${NC}"
}

add_project() {
	REPO_URL=$1
	PROJECT_NAME=$2
	ORIGINAL_DIR=$(pwd)

	echo -e "${BLUE}🚀 Adding project ${PROJECT_NAME}...${NC}"

	# Create temporary directory
	TEMP_DIR=$(mktemp -d)
	cd "$TEMP_DIR" || exit

	# Clone the project repo
	echo -e "${BLUE}📥 Cloning repository...${NC}"
	if ! git clone "${REPO_URL}" "${PROJECT_NAME}"; then
		echo -e "${RED}❌ Failed to clone repository${NC}"
		cd "$ORIGINAL_DIR" && rm -rf "$TEMP_DIR"
		exit 1
	fi

	# Get all commit messages
	cd "${PROJECT_NAME}" || exit
	COMMIT_LOG=$(git log --pretty=format:"- %s%n%b" | sed '/^$/N;/^\n$/D')
	cd "$ORIGINAL_DIR" || exit

	# Create project directory and move files
	echo -e "${BLUE}📦 Moving project files...${NC}"
	mkdir -p "${PROJECT_NAME}"
	cp -r "${TEMP_DIR}/${PROJECT_NAME}"/* "${PROJECT_NAME}/"

	# Clean up temp directory
	rm -rf "$TEMP_DIR"

	# Add and commit with full history in commit message
	git add "${PROJECT_NAME}"
	git commit -m "chore(gpm): add project ${PROJECT_NAME}" -m "Original commit history:" -m "$COMMIT_LOG"

	echo -e "${GREEN}✅ Successfully added ${PROJECT_NAME}${NC}"
}

install_gpm() {
	SCRIPT_PATH=$(realpath "$0")
	INSTALL_DIR="$HOME/.local/bin"
	COMPLETION_DIR="$HOME/.zsh/completions"

	echo -e "${BLUE}📦 Installing GPM...${NC}"

	# Create directories
	mkdir -p "$INSTALL_DIR" "$COMPLETION_DIR"

	# Copy script and completion
	cp "$SCRIPT_PATH" "$INSTALL_DIR/gpm"
	chmod +x "$INSTALL_DIR/gpm"

	# Create completion file
	cat >"$COMPLETION_DIR/_gpm" <<'EOL'
#compdef gpm

_gpm() {
    local curcontext="$curcontext" state line ret=1
    typeset -A opt_args

    _arguments -C \
        '1: :->command' \
        '*::arg:->args' && ret=0

    case $state in
        command)
            local commands=(
                'add:Add project to central repo'
                'submit:Submit project to 42 intra'
                'install:Add gpm to PATH'
            )
            _describe -t commands 'commands' commands && ret=0
            ;;
        args)
            case $words[1] in
                add|submit)
                    if (( CURRENT == 2 )); then
                        local projects=(${(f)"$(find . -maxdepth 1 -type d -not -path '*/\.*' -not -path '.' -printf '%f\n')"})
                        _describe -t projects 'projects' projects && ret=0
                    fi
                    ;;
            esac
            ;;
    esac

    return ret
}
EOL

	# Update .zshrc if needed
	if ! grep -q "fpath=(~/.zsh/completions \$fpath)" "$HOME/.zshrc"; then
		echo -e "\n# GPM completion" >>"$HOME/.zshrc"
		echo "fpath=(~/.zsh/completions \$fpath)" >>"$HOME/.zshrc"
		echo "autoload -U compinit" >>"$HOME/.zshrc"
		echo "compinit" >>"$HOME/.zshrc"
	fi

	# Add to PATH if not already there
	if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
		echo -e "\n# GPM Path" >>"$HOME/.zshrc"
		echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >>"$HOME/.zshrc"
		echo -e "${GREEN}✅ Please restart your shell or run: source ~/.zshrc${NC}"
	fi

	echo -e "${GREEN}✅ GPM installed successfully${NC}"
}

case "$1" in
"add")
	if [ "$#" -ne 3 ]; then
		usage
	fi
	add_project "$2" "$3"
	;;
"submit")
	if [ "$#" -ne 3 ]; then
		usage
	fi
	submit_project "$2" "$3"
	;;
"install")
	install_gpm
	;;
*)
	usage
	;;
esac